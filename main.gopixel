package main

import (
	"io/ioutil"
	"os"
	"unicode"

	"github.com/faiface/pixel"
	"github.com/faiface/pixel/pixelgl"
	"github.com/faiface/pixel/text"
	"github.com/golang/freetype/truetype"
	"golang.org/x/image/colornames"
	"golang.org/x/image/font"
)

//LoadTTF function loads a TTF font
func LoadTTF(path string, size float64) (font.Face, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	bytes, err := ioutil.ReadAll(file)
	if err != nil {
		return nil, err
	}

	font, err := truetype.Parse(bytes)
	if err != nil {
		return nil, err
	}
	return truetype.NewFace(font, &truetype.Options{
		Size:              size,
		GlyphCacheEntries: 1,
	}), nil
}

//Run function is the main thread
func Run() {
	windowConfig := pixelgl.WindowConfig{
		Title:  "Pixel Rocks!",
		Bounds: pixel.R(0, 0, 1024, 512),
		VSync:  true,
	}
	window, err := pixelgl.NewWindow(windowConfig)
	if err != nil {
		panic(err)
	}
	face, err := LoadTTF("RobotoMono-Regular.ttf", 32)
	if err != nil {
		panic(err)
	}
	atlas := text.NewAtlas(face, text.ASCII, text.RangeTable(unicode.Latin))
	txt := text.New(pixel.V(128, 256), atlas)
	txt.Color = colornames.Black
	for !window.Closed() {
		txt.WriteString(window.Typed())
		if window.JustPressed(pixelgl.KeyEnter) {
			txt.WriteRune('\n')
		}
		window.Clear(colornames.White)
		txt.Draw(window, pixel.IM)
		window.Update()
	}
}
func main() {
	pixelgl.Run(Run)

}
